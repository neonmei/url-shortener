// Code generated by mockery v2.46.3. DO NOT EDIT.

package domain

import (
	context "context"

	domain "github.com/neonmei/challenge_urlshortener/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockURLRepository is an autogenerated mock type for the URLRepository type
type MockURLRepository struct {
	mock.Mock
}

type MockURLRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockURLRepository) EXPECT() *MockURLRepository_Expecter {
	return &MockURLRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, urlID
func (_m *MockURLRepository) Delete(ctx context.Context, urlID string) error {
	ret := _m.Called(ctx, urlID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, urlID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockURLRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockURLRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - urlID string
func (_e *MockURLRepository_Expecter) Delete(ctx interface{}, urlID interface{}) *MockURLRepository_Delete_Call {
	return &MockURLRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, urlID)}
}

func (_c *MockURLRepository_Delete_Call) Run(run func(ctx context.Context, urlID string)) *MockURLRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLRepository_Delete_Call) Return(_a0 error) *MockURLRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURLRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockURLRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, urlID
func (_m *MockURLRepository) Get(ctx context.Context, urlID string) (*domain.ShortURL, error) {
	ret := _m.Called(ctx, urlID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ShortURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ShortURL, error)); ok {
		return rf(ctx, urlID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ShortURL); ok {
		r0 = rf(ctx, urlID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ShortURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, urlID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockURLRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockURLRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - urlID string
func (_e *MockURLRepository_Expecter) Get(ctx interface{}, urlID interface{}) *MockURLRepository_Get_Call {
	return &MockURLRepository_Get_Call{Call: _e.mock.On("Get", ctx, urlID)}
}

func (_c *MockURLRepository_Get_Call) Run(run func(ctx context.Context, urlID string)) *MockURLRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockURLRepository_Get_Call) Return(_a0 *domain.ShortURL, _a1 error) *MockURLRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockURLRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*domain.ShortURL, error)) *MockURLRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, shortUrl
func (_m *MockURLRepository) Save(ctx context.Context, shortUrl domain.ShortURL) error {
	ret := _m.Called(ctx, shortUrl)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ShortURL) error); ok {
		r0 = rf(ctx, shortUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockURLRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockURLRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - shortUrl domain.ShortURL
func (_e *MockURLRepository_Expecter) Save(ctx interface{}, shortUrl interface{}) *MockURLRepository_Save_Call {
	return &MockURLRepository_Save_Call{Call: _e.mock.On("Save", ctx, shortUrl)}
}

func (_c *MockURLRepository_Save_Call) Run(run func(ctx context.Context, shortUrl domain.ShortURL)) *MockURLRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ShortURL))
	})
	return _c
}

func (_c *MockURLRepository_Save_Call) Return(_a0 error) *MockURLRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURLRepository_Save_Call) RunAndReturn(run func(context.Context, domain.ShortURL) error) *MockURLRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockURLRepository creates a new instance of MockURLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockURLRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockURLRepository {
	mock := &MockURLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
